#!/usr/bin/env php
<?php

// Find autoloader (works for both development and installed)
$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',     // Standalone development
    __DIR__ . '/../../../autoload.php',      // Installed as Composer package
];

$autoloaderFound = false;
foreach ($autoloadPaths as $autoloadPath) {
    if (file_exists($autoloadPath)) {
        require_once $autoloadPath;
        $autoloaderFound = true;
        break;
    }
}

if (!$autoloaderFound) {
    fwrite(STDERR, "ERROR: Composer autoloader not found!\n");
    fwrite(STDERR, "Make sure 'composer install' has been executed.\n");
    exit(1);
}

use SymfonyBoost\SymfonyBoostServer;
use SymfonyBoost\InstallCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Dotenv\Dotenv;

// Check if it's a console command (install, --help, etc.)
$isConsoleCommand = false;
foreach ($argv as $arg) {
    if (in_array($arg, ['install', '--help', '-h', '--version', '-V', 'help'])) {
        $isConsoleCommand = true;
        break;
    }
}

// Console mode (for install, help, etc.)
if ($isConsoleCommand) {
    $application = new Application('Symfony Boost', '1.0.0-beta.5');
    $application->add(new InstallCommand());
    $application->run();
    exit(0);
}

// MCP server mode (default)
// Called by Claude Code, runs in stdio mode

$projectPath = getcwd();

// Get DATABASE_URL (prioritize env var from MCP config, fallback to .env file)
$databaseUrl = getenv('DATABASE_URL') ?: ($_ENV['DATABASE_URL'] ?? null);

// Only load .env if DATABASE_URL not already set (optimization for fast startup)
if (!$databaseUrl) {
    $envFile = $projectPath . '/.env';
    if (file_exists($envFile)) {
        $dotenv = new Dotenv();
        $dotenv->load($envFile);
        $databaseUrl = $_ENV['DATABASE_URL'] ?? null;
    }
}

if (!$databaseUrl) {
    fwrite(STDERR, "ERROR: DATABASE_URL not found!\n");
    fwrite(STDERR, "Make sure DATABASE_URL is set in .env or .mcp.json env field.\n");
    exit(1);
}

try {
    $server = new SymfonyBoostServer($databaseUrl, $projectPath);

    // Start MCP server immediately (blocks and listens on stdin)
    $server->run();

} catch (\Exception $e) {
    fwrite(STDERR, "\n=================================\n");
    fwrite(STDERR, "ERROR starting server\n");
    fwrite(STDERR, "=================================\n");
    fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
    fwrite(STDERR, "\nStack Trace:\n");
    fwrite(STDERR, $e->getTraceAsString() . "\n");
    fwrite(STDERR, "=================================\n");
    exit(1);
}